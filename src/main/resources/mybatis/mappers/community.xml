<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.community">

	<resultMap type="communityVO" id="community">
		<id property="no" column="no"/>
		<result property="id" column="id"/>
		<result property="title" column="title"/>
		<result property="contents" column="contents"/>
		<result property="views" column="views"/>
		<result property="postDate" column="post_date"/>
		
		<association property="memberVO" javaType="memberVO">
			<result property="nickname" column="nickname"/>
    		<result property="profile" column="profile"/>
		</association>
	</resultMap>
   
    <select id="selectCommunities" resultMap="community">
		<![CDATA[
	        SELECT
	        	c.*, m.nickname  
			FROM community c 
			JOIN member m 
			ON c.id=m.id 
			ORDER BY post_date DESC
        ]]>
    </select>
    
    <update id="updateCommunityView" parameterType="communityVO">
    	update community set views=views+1 where no=#{no}
    </update>
	
	<select id="selectCommunity" parameterType="communityVO" resultMap="community">
		SELECT c.*, m.nickname, m.profile
		FROM community c
		JOIN member m
		ON c.id = m.id
		WHERE c.no=#{no}
	</select>
	
	<insert id="insertCommunity" parameterType="communityVO">
		insert into community(id, title, contents, views, post_date)
		values(#{id}, #{title}, #{contents}, 0, now())
	</insert>
	
	<update id="updateCommunity" parameterType="communityVO">
		update community
		set title=#{title}, contents=#{contents}
		where no=#{no}
	</update>
	
	<delete id="deleteCommunity" parameterType="int">
		delete
		from community
		where no=#{no}
	</delete>
	
	<select id="selectSearchedCommunities" parameterType="java.util.Map" resultMap="community">
    <choose>
        <when test="word == null or word == ''">
            SELECT c.*, m.nickname
            FROM community c
            JOIN member m ON c.id = m.id
            ORDER BY post_date DESC
        </when>
        <otherwise>
            <choose>
                <when test="key == 'titleContent'">
                    SELECT c.*, m.nickname
                    FROM community c
                    JOIN member m ON c.id = m.id
                    WHERE title LIKE '%${word}%'
                    OR contents LIKE '%${word}%'
                    ORDER BY post_date DESC
                </when>
                <otherwise>
                    SELECT c.*, m.nickname
                    FROM community c
                    JOIN member m ON c.id = m.id
                    WHERE nickname LIKE '%${word}%'
                    ORDER BY post_date DESC
                </otherwise>
            </choose>
        </otherwise>
    </choose>
</select>

</mapper>



























